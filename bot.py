import telebot
import os
from telebot import types
from flask import Flask
import threading

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# Telegram ID –¥–ª—è –ª–æ–≥–æ–≤
ADMIN_CHAT_ID = 7564532772

# –ö–∞–Ω–∞–ª –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
CHANNEL_USERNAME = "atelier_NS"  # –±–µ–∑ @

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ PDF-—Ñ–∞–π–ª–æ–≤
price_files = {
    "man": ("üëî –ü–æ—à–∏–≤ –º—É–∂—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ú.pdf"),
    "woman": ("üëó –ü–æ—à–∏–≤ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ñ.pdf"),
    "man_premium": ("üß• –ü—Ä–µ–º–∏—É–º –ø–æ—à–∏–≤ –º—É–∂—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ú –ø—Ä–µ–º–∏—É–º.pdf"),
    "woman_premium": ("üíÉ –ü—Ä–µ–º–∏—É–º –ø–æ—à–∏–≤ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ñ –ø—Ä–µ–º–∏—É–º.pdf"),
    "repair": ("üßµ –†–µ–º–æ–Ω—Ç –∏ –ø–æ–¥–≥–æ–Ω–∫–∞", "–ü—Ä–∞–π—Å —Ä–µ–º–æ–Ω—Ç –∏ –ø–æ–¥–≥–æ–Ω–∫–∞.pdf")
}

# --- Flask-—Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

@app.route('/ping')
def ping():
    return "pong"

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª ---
def is_subscribed(chat_id):
    try:
        member = bot.get_chat_member(f"@{CHANNEL_USERNAME}", chat_id)
        return member.status in ["member", "creator", "administrator"]
    except:
        return False

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ª–∏—á–Ω—ã–π Telegram ---
def log_event(text):
    try:
        bot.send_message(ADMIN_CHAT_ID, text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∞–π—Å–∞–º–∏ ---
def show_price_menu(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=2)
    for key, (label, _) in price_files.items():
        markup.add(types.InlineKeyboardButton(text=label, callback_data=key))
    markup.add(
        types.InlineKeyboardButton("üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º", url="https://t.me/atelierNS"),
        types.InlineKeyboardButton("üåê –ü–æ—Å–µ—Ç–∏—Ç—å —Å–∞–π—Ç", url="https://atelierns.ru")
    )
    bot.send_message(chat_id, "üí¨ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–∞–π—Å:*", reply_markup=markup, parse_mode="Markdown")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start ---
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    if not is_subscribed(chat_id):
        text = (
            "‚ú® *–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –∞—Ç–µ–ª—å–µ –ù–∞—Ç–∞–ª—å–∏ –°–∞–≤–∏–Ω–æ–π.*\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∞–π—Å–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
            "üëâ [@atelier_NS](https://t.me/atelier_NS)\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â—ë —Ä–∞–∑."
        )
        bot.send_message(chat_id, text, parse_mode="Markdown")
        return

    show_price_menu(chat_id)
    log_event(f"‚úÖ @{message.from_user.username or '–±–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞'} –æ—Ç–∫—Ä—ã–ª –±–æ—Ç")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ ---
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "back":
        show_price_menu(call.message.chat.id)
        return

    if call.data in price_files:
        label, filename = price_files[call.data]
        try:
            with open(filename, "rb") as f:
                bot.send_document(call.message.chat.id, f, caption=filename)
            log_event(f"üì• @{call.from_user.username or '–±–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞'} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∞–π—Å: {label}")
        except:
            bot.send_message(call.message.chat.id, "‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
        bot.send_message(call.message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø—Ä–∞–π—Å:", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–ø—Ä–æ—Å–æ–≤) ---
@bot.message_handler(func=lambda m: True)
def handle_question(message):
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    log_event(f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç @{message.from_user.username or '–±–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º–∞'}: {message.text}")

# --- Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Fly.io ---
def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

# --- –ó–∞–ø—É—Å–∫ ---
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
threading.Thread(target=run_flask).start()
bot.polling()

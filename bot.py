import telebot
import os
from telebot import types
from flask import Flask
import threading

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

# –ö–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ (–±–µ–∑ @)
CHANNEL_USERNAME = "atelier_NS"

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ PDF-—Ñ–∞–π–ª–æ–≤
price_files = {
    "man": ("üëî –ü–æ—à–∏–≤ –º—É–∂—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ú.pdf"),
    "woman": ("üëó –ü–æ—à–∏–≤ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ñ.pdf"),
    "man_premium": ("üß• –ü—Ä–µ–º–∏—É–º –ø–æ—à–∏–≤ –º—É–∂—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ú –ø—Ä–µ–º–∏—É–º.pdf"),
    "woman_premium": ("üíÉ –ü—Ä–µ–º–∏—É–º –ø–æ—à–∏–≤ –∂–µ–Ω—Å–∫–æ–π –æ–¥–µ–∂–¥—ã", "–ü—Ä–∞–π—Å –ñ –ø—Ä–µ–º–∏—É–º.pdf"),
    "repair": ("üßµ –†–µ–º–æ–Ω—Ç –∏ –ø–æ–¥–≥–æ–Ω–∫–∞", "–ü—Ä–∞–π—Å —Ä–µ–º–æ–Ω—Ç –∏ –ø–æ–¥–≥–æ–Ω–∫–∞.pdf")
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
def is_subscribed(chat_id):
    try:
        member = bot.get_chat_member(f"@{CHANNEL_USERNAME}", chat_id)
        return member.status in ["member", "administrator", "creator"]
    except:
        return False

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    chat_id = message.chat.id
    if not is_subscribed(chat_id):
        text = (
            "‚ú® *–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –≤ –∞—Ç–µ–ª—å–µ –ù–∞—Ç–∞–ª—å–∏ –°–∞–≤–∏–Ω–æ–π.*\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∞–π—Å–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª:\n"
            "üëâ [@atelier_NS](https://t.me/atelier_NS)\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –µ—â—ë —Ä–∞–∑."
        )
        bot.send_message(chat_id, text, parse_mode="Markdown")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–π—Å–∞–º–∏
    markup = types.InlineKeyboardMarkup()
    for key, (label, _) in price_files.items():
        markup.add(types.InlineKeyboardButton(text=label, callback_data=key))

    bot.send_message(chat_id, "üí¨ *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—Ä–∞–π—Å:*", reply_markup=markup, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data in price_files)
def send_pdf(call):
    _, filename = price_files[call.data]
    try:
        with open(filename, "rb") as f:
            bot.send_document(call.message.chat.id, f, caption=filename)
    except:
        bot.send_message(call.message.chat.id, "‚ùóÔ∏è–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")

# Flask –¥–ª—è Render (–Ω–µ –¥–∞—ë—Ç –±–æ—Ç—É —É—Å–Ω—É—Ç—å)
@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç."

@app.route('/ping')
def ping():
    return "pong"

# –ó–∞–ø—É—Å–∫ Flask-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_flask():
    app.run(host="0.0.0.0", port=10000)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
threading.Thread(target=run_flask).start()
bot.polling()
@bot.message_handler(commands=['id'])
def send_user_id(message):
    bot.send_message(message.chat.id, f"–í–∞—à user_id: `{message.chat.id}`", parse_mode="Markdown")
